#!/usr/bin/env python

'''
this one will only delete files that has a corresponding DATA-file.
does not delete DATA-files or ini-files
usage: erm *.DATA
note:
    assumes that there is only 1 dot in the file (A1.DATA, not A1.NEW.DATA)
'''

import sys, os, argparse
import AtlejgTools.Utils as UT

parser = argparse.ArgumentParser(usage='\nDeletes ECLIPSE files\n Ex: %(prog)s -big A*.DATA\n (one option *must* be given)')
parser.add_argument('-all',   help='remove all', action='store_true')
parser.add_argument('-small', help='useless(?) files (DBG etc) ', action='store_true')
parser.add_argument('-big',   help='remove big files (UNRST etc) + useless(?) files (DBG etc) ', action='store_true')
parser.add_argument('-most',  help='remove everything except DATA-file', action='store_true')
parser.add_argument('-v',     help='be verbose', action='store_true')
parser.add_argument('files', nargs='+', help='add DATA files')
args = parser.parse_args()

datafiles = [fname for fname in args.files if fname.endswith('.DATA')]

SMALL = ('DBG', 'ERR', 'dbprtx', 'ECLEND', 'done', 'MSG', 'ECLRUN', 'eclrun_dbg', 'RFT', 'h5', 'OUT', 'OK', 'OK-stat-target', 'stderr', 'LSF-stdout')
BIG   = ('UNRST','INIT','EGRID','GRID', 'SAVE', 'RFT')
KEEP  = ('DATA', 'ini', 'inp', 'xls', 'xlsx', 'csv')

for datafile in datafiles:
   fnames = UT.glob(datafile.split('.')[0]+'.*')
   for fname in fnames:
      ext = os.path.splitext(fname)[1][1:]   # file extension (without dot)
      if ext.startswith('F'): ext = ext[1:]  # formatted file => remove F
      if args.all: 
         if args.v: print 'deleting', fname
         os.unlink(fname)
         continue
      if args.big and ext in BIG or ext in SMALL:
         if args.v: print 'deleting', fname
         os.unlink(fname)
         continue
      if args.most and ext not in KEEP:      # typical input-files
         if args.v: print 'deleting', fname
         os.unlink(fname)
         continue
      if args.small and ext in SMALL:        # delete small files
         if args.v: print 'deleting', fname
         os.unlink(fname)
         continue
      if args.v: print 'keeping', fname   # default
