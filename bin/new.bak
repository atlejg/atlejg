#!/usr/bin/perl -w
# Thu Mar 23 10:37:05 NWT 2006
# atle.j.gyllensten@hydro.com
#
# replaces newrun and newproj. see _usage below
#
# History
# Mon Mar 27 15:01:07 NWT 2006
#  - changed name of link from the 'case-directories' to their 'Local data directory' from Local to Data
#  - removed some directories created in the $_fluentVer directory
# Thu Oct 12 08:21:54 NST 2006
#  - ver 0.2
#  - including Anim, Figs ...
#  - more on /work ..
# Wed Dec 13 07:47:16 NWT 2006
#  - remove -f option on cp in _new_run
# Wed Jan  3 10:46:28 NWT 2007
#  - dont overwrite existing bc-files in _new_run
#  - include Docs directory in _new_proj
# Wed Mar  7 10:09:29 NWT 2007
#  - Tools directory now just a link to Resources
# Fri Dec 14 12:08:23 NWT 2007
#  - replaced _fluentVer with 'Cases'
# Wed Apr  9 18:49:50 NST 2008
#  - introduced subproj
# Tue Sep  2 08:52:01 NST 2008
#  - include render.jou when copying
# Fri Sep 12 10:37:46 NST 2008
#  - include run_anim.jou when copying
# Wed Oct 15 11:10:29 NST 2008
#  - create Tools/$subproj
# Mon Oct 27 09:57:26 NST 2008
#  - make an option for setting the case name from command line - not using _get_matching_case

use strict;
use Getopt::Std;

our $opt_c;
my $_debug = 1;
my $_local_link = 'Local';
my $_cases = 'Cases';
my $_proj_area = 'Proj';
my $_resources = $ENV{'HOME'} . "/Resources";
my $_fluent_rc = $ENV{'HOME'} . "/Fluent";

sub _debug
{
   return unless $_debug;
   print "$0::_debug : ",@_,"\n";
}

sub _mkdir 
{
   my $dir = shift;

   if (mkdir $dir) {
      print "$0: created $dir\n";
   }
   else {
      die "$0: could not create directory $dir : $!";
   }
}

sub _pick_a_case
{
   my $i = 0;
   my @list = map($i++ . "\t$_",@_); 
   print "pick one of the following cases: \n";
   print @list;
   my $answer = <>;

   if ($answer =~ /^\d+$/ && $answer >= 0 && $answer < @_) {
      return $_[$answer];
   }
   else {
      return '';
   }
}

sub _get_matching_case
{
   my $pre = shift;
   my $case;

   my @cases = qx/ls *_$pre.cas*/;
   _debug(@cases);

   if (@cases == 0) {
      print "no case matching $pre\n";
   }
   elsif (@cases == 1) {
      $case = $cases[0];
   }
   else {
      $case = _pick_a_case(@cases);
   }

   chomp($case) if $case;

   return $case;
}

sub _usage
{
   return <<THE_END;
 usage: $0 [-c <casenm>] case <oldcase> <newcase> 
 usage: $0 proj <projname>
 usage: $0 subproj <projname>
 usage: $0 run <oldrun> <newrun>
   ex:  
       $0 proj Testing
       $0 subproj Proto
       $0 subproj Main
       $0 case . ba01
       $0 case ba01 ba02
 
 the -c option is to allow more complicated case names (like ffr_mah=0.05.cas)
THE_END
}

sub _new_case 
{
   my $old = shift;
   my $new = shift;

   my $case;
   if ($opt_c) {
      $case = $opt_c;
   }
   else {
      my ($pre) = ($new=~ /^([a-z]*)/i); # extracts 'ba' from 'ba23'
      _debug("pre= $pre");
      $case = _get_matching_case($pre);
   }


   _mkdir($new);
   chdir $new || die "cannot enter directory $new";

   my @bc_s  = glob("../$old/*bc");
   my @jou_s = glob("../$old/*jou");

   map(qx/cp $_ ./,@bc_s);
   map(qx/cp $_ ./,@jou_s);
   qx(ln -s ../readme.txt);

   if ($case) {
      qx(ln -s ../$case _.cas);
   }

   if (-e "../$_local_link") {
      my $data_dir =  "../$_local_link/$new";
      _mkdir($data_dir);
      qx(ln -s $data_dir Data);
   }

   _mkdir('Anim');
   _mkdir('Figs');
   _mkdir('Monit');
   _mkdir('OLD');
   _mkdir('TMP');

   print "listing $new for qc ...\n";
   chdir '..';
   print qx(ls -lrt $new);

}

sub _new_run
{
   my $old = shift;
   my $new = shift;

   _debug("old= $old new= $new");

   if (-e "$new.bc") {
      warn("$0: $new.bc already exists. Aborting");
      return;
   }

   qx(cp $old.bc $new.bc);
   qx(cp run$old.jou run$new.jou);
}

sub _new_proj
{
   my $proj = shift;

   _mkdir($proj);
   _mkdir("$proj/OLD");
   _mkdir("$_resources/$proj");
   _mkdir("$_resources/$proj/Tools");
   qx(cd $proj;ln -s $_resources/$proj/Tools);
   _mkdir("$proj/Docs");

   if ($ENV{'HOST'} =~ /por017lin/) {
      _mkdir("/work/$ENV{USER}/$_proj_area/$proj");
      qx(cd $proj;ln -s /work/$ENV{USER}/$_proj_area/$proj $_local_link);
   }
}

sub _new_subproj
{
   my $subproj = shift;

   _mkdir($subproj);
   _mkdir("$subproj/Geom");
   qx(cd $subproj/Geom;ln -s ../readme.txt);
   _mkdir("$subproj/OLD");
   _mkdir("$subproj/Docs");
   _mkdir("$subproj/$_cases");
   _mkdir("$subproj/$_cases/Figs");
   _mkdir("$subproj/$_cases/Anim");
   _mkdir("$subproj/$_cases/OLD");
   _mkdir("Tools/$subproj");
   qx(cd $subproj/$_cases;ln -s ../readme.txt);
   qx(touch $subproj/readme.txt);
   qx(cp $_fluent_rc/Jou/setup.jou $subproj/$_cases);
   qx(cp $_fluent_rc/Jou/start.jou $subproj/$_cases);
   qx(cp $_fluent_rc/Jou/render.jou $subproj/$_cases);
   qx(cp $_fluent_rc/Jou/run1.jou $subproj/$_cases);
   qx(cp $_fluent_rc/Jou/run_anim.jou $subproj/$_cases);

   if ($ENV{'HOST'} =~ /por017lin/) {
      _mkdir("$_local_link/$subproj");
      _mkdir("$_local_link/$subproj/$_cases");
      qx(cd $subproj;ln -s ../$_local_link/$subproj $_local_link);
      qx(cd $subproj/$_cases;ln -s ../$_local_link/$_cases $_local_link);
   }
}

#======================= MAIN LOGIC ===========================================

getopt('c');

my $mode = shift(@ARGV) || die _usage();

if ($mode =~ /^proj/i) {
   my $proj = shift || die _usage();
   _new_proj($proj);
}
elsif ($mode =~ /^subproj/i) {
   my $subproj = shift || die _usage();
   _new_subproj($subproj);
}
elsif ($mode =~ /case/i) {
   my $old = shift(@ARGV) || die _usage();
   my $new = shift(@ARGV) || die _usage();
   _new_case($old,$new);
}
elsif ($mode =~ /run/i) {
   defined (my $old = shift(@ARGV)) || die _usage();
   defined (my $new = shift(@ARGV)) || die _usage();
   _new_run($old,$new);
}
else {
   die "$0 : unknown mode: $mode";
}

print "$0: done\n";
